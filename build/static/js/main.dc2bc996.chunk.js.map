{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","todoList.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","props","useState","newTaskTitle","setNewTaskTitle","error","setError","addItem","trimmedTitle","trim","errorMessage","style","backgroundColor","color","fontWeight","border","outline","undefined","value","placeholder","onChange","e","currentTarget","onKeyPress","key","onClick","EditableSpan","editMode","setEditMode","title","autoFocus","onBlur","setNewTitle","TodoList","TaskElement","tasks","map","t","className","isDone","id","changeTaskStatus","checked","type","changeTaskTitle","removeTask","allBtnClass","filter","activeBtnClass","completedBtnClass","changeTodoListTitle","removeTodoList","addTask","changeFilter","App","todoListId_1","v1","todoListId_2","todoLists","setTodoLists","setTasks","todoListID","newTask","taskID","taskId","tl","todoListsComponents","taskForRender","newTodoList","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"4OAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCZOC,G,MAAc,SAACC,GACxB,IAEA,EAAwCC,mBAAS,IAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAA0BF,oBAAkB,GAA5C,mBAAOG,EAAP,KAAcC,EAAd,KAKMC,EAAU,WACZ,IAAMC,EAAeL,EAAaM,OAC9BD,GACAP,EAAMM,QAAQC,GACdJ,EAAgB,KAEhBE,GAAS,GAEbF,EAAgB,KAOdM,EAAeL,GAAS,yBAAKM,MAvBZ,CAAEC,gBAAiB,MAAOC,MAAO,QAASC,WAAY,MAuB/C,sBAG9B,OACI,6BACI,2BACIH,MAAON,EA5BO,CAACU,OAAQ,kBAAmBC,QAAS,aA4BjBC,EAClCC,MAAOf,EACPgB,YAAY,iBACZC,SA5BiB,SAACC,GAC1Bf,GAAS,GACTF,EAAgBiB,EAAEC,cAAcJ,QA2BxBK,WAfc,SAACF,GACT,UAAVA,EAAEG,KACFjB,OAeA,4BAAQkB,QAASlB,GAAjB,KACCG,KCpCAgB,EAAe,SAACzB,GACzB,MAAgCC,oBAAkB,GAAlD,mBAAOyB,EAAP,KAAiBC,EAAjB,KACA,EAAwC1B,mBAAiBD,EAAM4B,OAA/D,mBAAO1B,EAAP,KAAqBC,EAArB,KASA,OACIuB,EACM,2BAAOT,MAAOf,EACP2B,WAAW,EACXC,OAXG,WAChBH,GAAY,GACZ3B,EAAM+B,YAAY7B,IAULiB,SARY,SAACC,GAC1BjB,EAAgBiB,EAAEC,cAAcJ,UAU1B,8BAAOjB,EAAM4B,MACX,4BAAQJ,QAjBD,kBAAMG,GAAY,KAiBzB,QADF,MCAP,SAASK,EAAShC,GAGrB,IAAIiC,EAAcjC,EAAMkC,MAAMC,KAAI,SAAAC,GAO9B,OAAO,wBAAIC,UAAWD,EAAEE,OAAS,UAAY,GAAIf,IAAKa,EAAEG,IACpD,2BACIpB,SAJa,SAACC,GAAD,OAAsCpB,EAAMwC,iBAAiBJ,EAAEG,GAAInB,EAAEC,cAAcoB,QAASzC,EAAMuC,KAK/GG,KAAK,WACLD,QAASL,EAAEE,SAEf,kBAAC,EAAD,CAAcV,MAAOQ,EAAER,MAAOG,YAPf,SAACH,GAAD,OAAoB5B,EAAM2C,gBAAgBP,EAAEG,GAAIX,EAAO5B,EAAMuC,OAQ5E,4BAAQf,QAbY,WACpBxB,EAAM4C,WAAWR,EAAEG,GAAIvC,EAAMuC,MAY7B,SAaFM,EAA+B,QAAjB7C,EAAM8C,OAAmB,gBAAkB,GACzDC,EAAkC,WAAjB/C,EAAM8C,OAAsB,gBAAkB,GAC/DE,EAAqC,cAAjBhD,EAAM8C,OAAyB,gBAAkB,GAE3E,OACI,yBAAKT,UAAU,YACX,4BACI,kBAAC,EAAD,CAAcT,MAAO5B,EAAM4B,MAAOG,YAVhB,SAACH,GAC3B5B,EAAMiD,oBAAoBrB,EAAO5B,EAAMuC,OAU/B,4BAAQf,QAAS,kBAAMxB,EAAMkD,eAAelD,EAAMuC,MAAlD,MAYJ,kBAAC,EAAD,CAAajC,QA7BL,SAACsB,GACb5B,EAAMmD,QAAQvB,EAAO5B,EAAMuC,OA8BvB,wBAAIF,UAAU,QACTJ,GAEL,yBAAKI,UAAU,OACX,4BAAQA,UAAWQ,EAAarB,QAhClB,kBAAMxB,EAAMoD,aAAa,MAAOpD,EAAMuC,MAgCpD,OACA,4BAAQF,UAAWU,EAAgBvB,QAhClB,kBAAMxB,EAAMoD,aAAa,SAAUpD,EAAMuC,MAgC1D,UACA,4BAAQF,UAAWW,EAAmBxB,QAhClB,kBAAMxB,EAAMoD,aAAa,YAAapD,EAAMuC,MAgChE,e,YCmDDc,MAjHf,WAAgB,IAAD,EAELC,EAAeC,cACfC,EAAeD,cACrB,EAAkCtD,mBAA8B,CAC5D,CAACsC,GAAIe,EAAc1B,MAAO,iBAAkBkB,OAAQ,OACpD,CAACP,GAAIiB,EAAc5B,MAAO,eAAgBkB,OAAQ,SAFtD,mBAAOW,EAAP,KAAkBC,EAAlB,KAKA,EAA0BzD,oBAAQ,mBAC7BqD,EAAe,CACZ,CAACf,GAAIgB,cAAM3B,MAAO,OAAQU,QAAQ,GAClC,CAACC,GAAIgB,cAAM3B,MAAO,MAAOU,QAAQ,GACjC,CAACC,GAAIgB,cAAM3B,MAAO,QAASU,QAAQ,GACnC,CAACC,GAAIgB,cAAM3B,MAAO,WAAYU,QAAQ,KALZ,cAO7BkB,EAAe,CACZ,CAACjB,GAAIgB,cAAM3B,MAAO,OAAQU,QAAQ,GAClC,CAACC,GAAIgB,cAAM3B,MAAO,OAAQU,QAAQ,GAClC,CAACC,GAAIgB,cAAM3B,MAAO,OAAQU,QAAQ,GAClC,CAACC,GAAIgB,cAAM3B,MAAO,QAASU,QAAQ,KAXT,IAAlC,mBAAOJ,EAAP,KAAcyB,EAAd,KAkBA,SAASR,EAAQvB,EAAegC,GAC5B,IAAIC,EAAoB,CACpBtB,GAAIgB,cACJ3B,MAAOA,EACPU,QAAQ,GAGZqB,EAAS,2BAAIzB,GAAL,kBAAa0B,EAAb,CAA2BC,GAA3B,mBAAuC3B,EAAM0B,QAEzD,SAAShB,EAAWkB,EAAgBF,GAChCD,EAAS,2BAAIzB,GAAL,kBAAa0B,EAAa1B,EAAM0B,GAAYd,QAAO,SAAAV,GAAC,OAAIA,EAAEG,KAAOuB,QAE7E,IAAMnB,EAAkB,SAACmB,EAAgBlC,EAAegC,GACpDD,EAAS,2BAAIzB,GAAL,kBACH0B,EAAa1B,EAAM0B,GAAYzB,KAAI,SAAAC,GAAC,OAAIA,EAAEG,KAAOuB,EAAT,2BAAsB1B,GAAtB,IAAyBR,MAAOA,IAASQ,SAEpFI,EAAmB,SAACuB,EAAgBzB,EAAiBsB,GAEvDD,EAAS,2BAAIzB,GAAL,kBACH0B,EAAa1B,EAAM0B,GAAYzB,KAAI,SAAAC,GAAC,OAAIA,EAAEG,KAAOwB,EAAT,2BAAsB3B,GAAtB,IAAyBE,OAAQA,IAAUF,SActFc,EAAiB,SAACU,GACpBF,EAAaD,EAAUX,QAAO,SAAAkB,GAAE,OAAIA,EAAGzB,KAAOqB,aACvC1B,EAAM0B,IAEXX,EAAsB,SAACrB,EAAegC,GACxCF,EAAaD,EAAUtB,KAAI,SAAA6B,GAAE,OAAIA,EAAGzB,KAAOqB,EAAV,2BAA2BI,GAA3B,IAA+BpC,MAAOA,IAASoC,OAEpF,SAASZ,EAAaN,EAA0Bc,GAC5CF,EAAaD,EAAUtB,KAAI,SAAA6B,GAAE,OAAIA,EAAGzB,KAAOqB,EAAV,2BAA2BI,GAA3B,IAA+BlB,WAAUkB,MAI9E,IAAMC,EAAsBR,EAAUtB,KAAI,SAAA6B,GAEtC,IAAIE,EAAiChC,EAAM8B,EAAGzB,IAS9C,MARkB,WAAdyB,EAAGlB,SACHoB,EAAgBhC,EAAM8B,EAAGzB,IAAIO,QAAO,SAAAV,GAAC,OAAKA,EAAEE,WAG9B,cAAd0B,EAAGlB,SACHoB,EAAgBhC,EAAM8B,EAAGzB,IAAIO,QAAO,SAAAV,GAAC,OAAIA,EAAEE,WAI3C,kBAACN,EAAD,CACIT,IAAKyC,EAAGzB,GACRA,GAAIyB,EAAGzB,GACPO,OAAQkB,EAAGlB,OACXlB,MAAOoC,EAAGpC,MACVM,MAAOgC,EACPf,QAASA,EACTP,WAAYA,EACZQ,aAAcA,EACdZ,iBAAkBA,EAClBU,eAAgBA,EAChBP,gBAAiBA,EACjBM,oBAAqBA,OAQjC,OACI,yBAAKZ,UAAU,OACX,kBAAC,EAAD,CAAa/B,QAxDD,SAACsB,GACjB,IAAMgC,EAAaL,cACZY,EAA2B,CAC9B5B,GAAIqB,EACJhC,MAAOA,EACPkB,OAAQ,OAEZY,EAAa,GAAD,mBAAKD,GAAL,CAAgBU,KAC5BR,EAAS,2BAAIzB,GAAL,kBAAa0B,EAAa,SAiD7BK,IC1HbG,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SLoI5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA1E,GACL2E,QAAQ3E,MAAMA,EAAM4E,a","file":"static/js/main.dc2bc996.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = (props:AddItemFormPropsType) => {\r\n    const errorMsgStyles = { backgroundColor: \"red\", color: \"white\", fontWeight: 900}\r\n    const  errorInputStyles = {border: \"3px solid green\", outline: \"none\"}\r\n    const [newTaskTitle, setNewTaskTitle] = useState(\"\")\r\n    const [error, setError] = useState<boolean>(false)\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(false)\r\n        setNewTaskTitle(e.currentTarget.value)\r\n    }\r\n    const addItem = () => {\r\n        const trimmedTitle = newTaskTitle.trim()\r\n        if (trimmedTitle) {\r\n            props.addItem(trimmedTitle)\r\n            setNewTaskTitle(\"\")\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setNewTaskTitle(\"\")\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            addItem()\r\n        }\r\n    }\r\n    const errorMessage = error && <div style={errorMsgStyles}>Title is required!</div>\r\n\r\n\r\n    return (\r\n        <div>\r\n            <input\r\n                style={error ? errorInputStyles : undefined}\r\n                value={newTaskTitle}\r\n                placeholder='Enter title...'\r\n                onChange={onChangeTitleHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n            />\r\n            <button onClick={addItem}>+</button>\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    setNewTitle: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = (props: EditableSpanPropsType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [newTaskTitle, setNewTaskTitle] = useState<string>(props.title)\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.setNewTitle(newTaskTitle)\r\n    }\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTaskTitle(e.currentTarget.value)\r\n    }\r\n    return (\r\n        editMode\r\n            ? <input value={newTaskTitle}\r\n                     autoFocus={true}\r\n                     onBlur={offEditMode}\r\n                     onChange={onChangeTitleHandler}\r\n\r\n            />\r\n            : <span>{props.title}\r\n                <button onClick={onEditMode}>edit</button> </span>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {FilterValuesType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\n\r\n\r\nexport type taskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype todolistPropsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n    tasks: Array<taskType>\r\n    removeTask: (id: string, todoListID: string) => void\r\n    changeFilter: (value: FilterValuesType, todoListID: string) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    changeTaskTitle: (taskID: string, title: string, todoListID: string) => void\r\n    changeTodoListTitle: (title: string, todoListID: string) => void\r\n}\r\n\r\nexport function TodoList(props: todolistPropsType) {\r\n\r\n\r\n    let TaskElement = props.tasks.map(t => {\r\n        const onRemoveHandler = () => {\r\n            props.removeTask(t.id, props.id)\r\n\r\n        }\r\n        const changeStatus = (e: ChangeEvent<HTMLInputElement>) => props.changeTaskStatus(t.id, e.currentTarget.checked, props.id)\r\n        const changTitle = (title: string) =>  props.changeTaskTitle(t.id, title, props.id)\r\n        return <li className={t.isDone ? \"is-done\" : \"\"} key={t.id}>\r\n            <input\r\n                onChange={changeStatus}\r\n                type=\"checkbox\"\r\n                checked={t.isDone}\r\n            />\r\n            <EditableSpan title={t.title} setNewTitle={changTitle}/>\r\n            <button onClick={onRemoveHandler}>x</button>\r\n        </li>\r\n    })\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id)\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id)\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id)\r\n    const onChangeTodoListTitle = (title: string) => {\r\n        props.changeTodoListTitle(title, props.id)\r\n    }\r\n    const allBtnClass = props.filter === \"all\" ? \"active-filter\" : \"\"\r\n    const activeBtnClass = props.filter === \"active\" ? \"active-filter\" : \"\"\r\n    const completedBtnClass = props.filter === \"completed\" ? \"active-filter\" : \"\"\r\n\r\n    return (\r\n        <div className=\"todolist\">\r\n            <h3>\r\n                <EditableSpan title={props.title} setNewTitle={onChangeTodoListTitle}/>\r\n                <button onClick={() => props.removeTodoList(props.id)}>x</button>\r\n            </h3>\r\n            {/*<div>\r\n                <input\r\n                    className={error ? \"error\" : \"\"}\r\n                    value={newTaskTitle}\r\n                    onChange={onChangeTitleHandler}\r\n                    onKeyPress={onKeyPressHandler}\r\n                />\r\n                <button onClick={addTask}>+</button>\r\n                {errorMessage}\r\n            </div>*/}\r\n            <AddItemForm addItem={addTask}/>\r\n\r\n            <ul className=\"list\">\r\n                {TaskElement}\r\n            </ul>\r\n            <div className=\"btn\">\r\n                <button className={allBtnClass} onClick={onAllClickHandler}>All</button>\r\n                <button className={activeBtnClass} onClick={onActiveClickHandler}>Active</button>\r\n                <button className={completedBtnClass} onClick={onCompletedClickHandler}>Completed</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {taskType, TodoList} from \"./todoList\";\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\n\r\ntype TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\ntype TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\n\r\nfunction App() {\r\n\r\n    const todoListId_1 = v1()\r\n    const todoListId_2 = v1()\r\n    const [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n        {id: todoListId_1, title: \"What to learn?\", filter: \"all\"},\r\n        {id: todoListId_2, title: \"What to buy?\", filter: \"all\"},\r\n    ])\r\n\r\n    const [tasks, setTasks] = useState<TasksStateType>({\r\n        [todoListId_1]: [\r\n            {id: v1(), title: \"HTML\", isDone: false},\r\n            {id: v1(), title: \"Css\", isDone: true},\r\n            {id: v1(), title: \"React\", isDone: false},\r\n            {id: v1(), title: \"Graph QL\", isDone: true}\r\n        ],\r\n        [todoListId_2]: [\r\n            {id: v1(), title: \"Meat\", isDone: false},\r\n            {id: v1(), title: \"Beer\", isDone: true},\r\n            {id: v1(), title: \"Milk\", isDone: false},\r\n            {id: v1(), title: \"Bread\", isDone: true}\r\n        ]\r\n\r\n    })\r\n\r\n\r\n    //функции для Task\r\n    function addTask(title: string, todoListID: string) {\r\n        let newTask: taskType = {\r\n            id: v1(),\r\n            title: title,\r\n            isDone: false\r\n        }\r\n\r\n        setTasks({...tasks, [todoListID]: [newTask, ...tasks[todoListID]]})\r\n    }\r\n    function removeTask(taskID: string, todoListID: string) {\r\n        setTasks({...tasks, [todoListID]: tasks[todoListID].filter(t => t.id !== taskID)})                                // проверить работу через консоль после урока\r\n    }\r\n    const changeTaskTitle = (taskID: string, title: string, todoListID: string) => {\r\n        setTasks({...tasks,\r\n            [todoListID]: tasks[todoListID].map(t => t.id === taskID ? {...t, title: title} : t)})\r\n    }\r\n    const changeTaskStatus = (taskId: string, isDone: boolean, todoListID: string) => {\r\n\r\n        setTasks({...tasks,\r\n            [todoListID]: tasks[todoListID].map(t => t.id === taskId ? {...t, isDone: isDone} : t)})\r\n    }\r\n\r\n    //функции для TodoList\r\n    const addTodoList = (title: string) => {\r\n        const todoListID = v1()\r\n        const  newTodoList: TodoListType ={\r\n            id: todoListID,\r\n            title: title,\r\n            filter: \"all\"\r\n        }\r\n        setTodoLists([...todoLists, newTodoList])\r\n        setTasks({...tasks, [todoListID]: []})\r\n    }\r\n    const removeTodoList = (todoListID: string) => {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListID))\r\n        delete tasks[todoListID]\r\n    }\r\n    const changeTodoListTitle = (title: string, todoListID: string) => {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListID ? {...tl, title: title} : tl))\r\n    }\r\n    function changeFilter(filter: FilterValuesType, todoListID: string) {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListID ? {...tl, filter} : tl))\r\n    }\r\n\r\n    //UI:\r\n    const todoListsComponents = todoLists.map(tl => {\r\n\r\n        let taskForRender: Array<TaskType> = tasks[tl.id];\r\n        if (tl.filter === \"active\") {\r\n            taskForRender = tasks[tl.id].filter(t => !t.isDone);\r\n        }\r\n\r\n        if (tl.filter === \"completed\") {\r\n            taskForRender = tasks[tl.id].filter(t => t.isDone);\r\n        }\r\n\r\n        return (\r\n            <TodoList\r\n                key={tl.id}\r\n                id={tl.id}\r\n                filter={tl.filter}\r\n                title={tl.title}\r\n                tasks={taskForRender}\r\n                addTask={addTask}\r\n                removeTask={removeTask}\r\n                changeFilter={changeFilter}\r\n                changeTaskStatus={changeTaskStatus}\r\n                removeTodoList={removeTodoList}\r\n                changeTaskTitle={changeTaskTitle}\r\n                changeTodoListTitle={changeTodoListTitle}\r\n            />\r\n        )\r\n    })\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AddItemForm addItem={addTodoList}/>\r\n            {todoListsComponents}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default App;\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App  from \"./App\";\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}