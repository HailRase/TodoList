{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","todoList.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","props","useState","newTaskTitle","setNewTaskTitle","error","setError","addItem","trimmedTitle","trim","TextField","size","variant","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","IconButton","onClick","color","AddBox","fontSize","EditableSpan","editMode","setEditMode","title","style","width","autoFocus","onBlur","setNewTitle","Edit","TodoList","TaskElement","tasks","map","t","ListItem","disableGutters","className","isDone","id","divider","padding","display","justifyContent","Checkbox","changeTaskStatus","checked","changeTaskTitle","removeTask","Delete","filter","Typography","fontWeight","changeTodoListTitle","removeTodoList","addTask","List","ButtonGroup","disableElevation","Button","changeFilter","App","todoListId_1","v1","todoListId_2","todoLists","setTodoLists","setTasks","todoListID","newTask","taskID","taskId","tl","todoListsComponents","taskForRender","Grid","item","Paper","elevation","AppBar","position","Toolbar","edge","aria-label","Menu","Container","fixed","container","newTodoList","spacing","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.d334d9e9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = (props: AddItemFormPropsType) => {\r\n    const errorMsgStyles = {backgroundColor: \"red\", color: \"white\", fontWeight: 900}\r\n    const [newTaskTitle, setNewTaskTitle] = useState(\"\")\r\n    const [error, setError] = useState<boolean>(false)\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(false)\r\n        setNewTaskTitle(e.currentTarget.value)\r\n    }\r\n    const addItem = () => {\r\n        const trimmedTitle = newTaskTitle.trim()\r\n        if (trimmedTitle) {\r\n            props.addItem(trimmedTitle)\r\n            setNewTaskTitle(\"\")\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setNewTaskTitle(\"\")\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            addItem()\r\n        }\r\n    }\r\n    const errorMessage = error && <div style={errorMsgStyles}>Title is required!</div>\r\n\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                size={\"small\"}\r\n                variant={\"outlined\"}\r\n                value={newTaskTitle}\r\n                onChange={onChangeTitleHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                label={\"Title\"}\r\n                error={error}\r\n                helperText={error && \"Title is required!!!\"}\r\n            />\r\n            <IconButton onClick={addItem} color={\"primary\"} size={\"small\"}>\r\n                <AddBox fontSize={\"large\"}/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {Edit} from \"@material-ui/icons\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    setNewTitle: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = (props: EditableSpanPropsType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [newTaskTitle, setNewTaskTitle] = useState<string>(props.title)\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.setNewTitle(newTaskTitle)\r\n    }\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTaskTitle(e.currentTarget.value)\r\n    }\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                style={{width: \"150px\"}}\r\n                value={newTaskTitle}\r\n                autoFocus={true}\r\n                onBlur={offEditMode}\r\n                onChange={onChangeTitleHandler}\r\n            />\r\n            : <span>{props.title}\r\n                <IconButton onClick={onEditMode} size={\"small\"}>\r\n                    <Edit fontSize={\"small\"}/>\r\n                </IconButton>\r\n            </span>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {FilterValuesType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, ButtonGroup, Checkbox, IconButton, List, ListItem, Typography} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\n\r\nexport type taskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype todolistPropsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n    tasks: Array<taskType>\r\n    removeTask: (id: string, todoListID: string) => void\r\n    changeFilter: (value: FilterValuesType, todoListID: string) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    changeTaskTitle: (taskID: string, title: string, todoListID: string) => void\r\n    changeTodoListTitle: (title: string, todoListID: string) => void\r\n}\r\n\r\nexport function TodoList(props: todolistPropsType) {\r\n\r\n\r\n    let TaskElement = props.tasks.map(t => {\r\n        const onRemoveHandler = () => {\r\n            props.removeTask(t.id, props.id)\r\n        }\r\n        const changeStatus = (e: ChangeEvent<HTMLInputElement>) => props.changeTaskStatus(t.id, e.currentTarget.checked, props.id)\r\n        const changTitle = (title: string) => props.changeTaskTitle(t.id, title, props.id)\r\n        return (\r\n            <ListItem\r\n                disableGutters\r\n                className={t.isDone ? \"is-done\" : \"\"}\r\n                key={t.id}\r\n                divider\r\n                style={{padding: \"0px\", display: \"flex\", justifyContent: \"space-between\"}}\r\n            >\r\n                <Checkbox\r\n                    onChange={changeStatus}\r\n                    color={\"primary\"}\r\n                    checked={t.isDone}\r\n                />\r\n                <EditableSpan title={t.title} setNewTitle={changTitle}/>\r\n                <IconButton onClick={onRemoveHandler} size={\"small\"}>\r\n                    <Delete fontSize={\"small\"}/>\r\n                </IconButton>\r\n            </ListItem>\r\n        )\r\n    })\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id)\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id)\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id)\r\n    const onChangeTodoListTitle = (title: string) => {\r\n        props.changeTodoListTitle(title, props.id)\r\n    }\r\n    const allBtnClass = props.filter === \"all\" ? \"active-filter\" : \"\"\r\n    const activeBtnClass = props.filter === \"active\" ? \"active-filter\" : \"\"\r\n    const completedBtnClass = props.filter === \"completed\" ? \"active-filter\" : \"\"\r\n\r\n    return (\r\n        <div className=\"todolist\">\r\n            <Typography variant={\"h6\"} style={{fontWeight: \"bold\"}}>\r\n                <EditableSpan title={props.title} setNewTitle={onChangeTodoListTitle}/>\r\n                <IconButton onClick={() => props.removeTodoList(props.id)}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </Typography>\r\n\r\n            <AddItemForm addItem={addTask}/>\r\n\r\n            <List>\r\n                {TaskElement}\r\n            </List>\r\n            <div className=\"btn\">\r\n                <ButtonGroup\r\n                    variant={\"contained\"}\r\n                    size={\"small\"}\r\n                    disableElevation\r\n                    style={{display: \"flex\", justifyContent: \"space-between\"}}\r\n                >\r\n                    <Button color={props.filter === \"all\" ? \"secondary\" : \"primary\"}\r\n                            onClick={onAllClickHandler}>All</Button>\r\n                    <Button color={props.filter === \"active\" ? \"secondary\" : \"primary\"}\r\n                            onClick={onActiveClickHandler}>Active</Button>\r\n                    <Button color={props.filter === \"completed\" ? \"secondary\" : \"primary\"}\r\n                            onClick={onCompletedClickHandler}>Completed</Button>\r\n                </ButtonGroup>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {taskType, TodoList} from \"./todoList\";\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\ntype TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\ntype TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\n\r\nfunction App() {\r\n\r\n    const todoListId_1 = v1()\r\n    const todoListId_2 = v1()\r\n    const [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n        {id: todoListId_1, title: \"What to learn?\", filter: \"all\"},\r\n        {id: todoListId_2, title: \"What to buy?\", filter: \"all\"},\r\n    ])\r\n\r\n    const [tasks, setTasks] = useState<TasksStateType>({\r\n        [todoListId_1]: [\r\n            {id: v1(), title: \"HTML\", isDone: false},\r\n            {id: v1(), title: \"Css\", isDone: true},\r\n            {id: v1(), title: \"React\", isDone: false},\r\n            {id: v1(), title: \"Graph QL\", isDone: true}\r\n        ],\r\n        [todoListId_2]: [\r\n            {id: v1(), title: \"Meat\", isDone: false},\r\n            {id: v1(), title: \"Beer\", isDone: true},\r\n            {id: v1(), title: \"Milk\", isDone: false},\r\n            {id: v1(), title: \"Bread\", isDone: true}\r\n        ]\r\n\r\n    })\r\n\r\n\r\n    //функции для Task\r\n    function addTask(title: string, todoListID: string) {\r\n        let newTask: taskType = {\r\n            id: v1(),\r\n            title: title,\r\n            isDone: false\r\n        }\r\n\r\n        setTasks({...tasks, [todoListID]: [newTask, ...tasks[todoListID]]})\r\n    }\r\n\r\n    function removeTask(taskID: string, todoListID: string) {\r\n        setTasks({...tasks, [todoListID]: tasks[todoListID].filter(t => t.id !== taskID)})                                // проверить работу через консоль после урока\r\n    }\r\n\r\n    const changeTaskTitle = (taskID: string, title: string, todoListID: string) => {\r\n        setTasks({\r\n            ...tasks,\r\n            [todoListID]: tasks[todoListID].map(t => t.id === taskID ? {...t, title: title} : t)\r\n        })\r\n    }\r\n    const changeTaskStatus = (taskId: string, isDone: boolean, todoListID: string) => {\r\n\r\n        setTasks({\r\n            ...tasks,\r\n            [todoListID]: tasks[todoListID].map(t => t.id === taskId ? {...t, isDone: isDone} : t)\r\n        })\r\n    }\r\n\r\n    //функции для TodoList\r\n    const addTodoList = (title: string) => {\r\n        const todoListID = v1()\r\n        const newTodoList: TodoListType = {\r\n            id: todoListID,\r\n            title: title,\r\n            filter: \"all\"\r\n        }\r\n        setTodoLists([...todoLists, newTodoList])\r\n        setTasks({...tasks, [todoListID]: []})\r\n    }\r\n    const removeTodoList = (todoListID: string) => {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListID))\r\n        delete tasks[todoListID]\r\n    }\r\n    const changeTodoListTitle = (title: string, todoListID: string) => {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListID ? {...tl, title: title} : tl))\r\n    }\r\n\r\n    function changeFilter(filter: FilterValuesType, todoListID: string) {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListID ? {...tl, filter} : tl))\r\n    }\r\n\r\n    //UI:\r\n    const todoListsComponents = todoLists.map(tl => {\r\n\r\n        let taskForRender: Array<TaskType> = tasks[tl.id];\r\n        if (tl.filter === \"active\") {\r\n            taskForRender = tasks[tl.id].filter(t => !t.isDone);\r\n        }\r\n\r\n        if (tl.filter === \"completed\") {\r\n            taskForRender = tasks[tl.id].filter(t => t.isDone);\r\n        }\r\n\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Paper elevation={8} style={{padding: \"10px\"}}>\r\n                    <TodoList\r\n                        id={tl.id}\r\n                        filter={tl.filter}\r\n                        title={tl.title}\r\n                        tasks={taskForRender}\r\n                        addTask={addTask}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        removeTodoList={removeTodoList}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeTodoListTitle={changeTodoListTitle}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position={\"sticky\"}>\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button color=\"inherit\" variant={\"outlined\"}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"29px 0\"}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={4}>\r\n                    {todoListsComponents}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default App;\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App  from \"./App\";\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}