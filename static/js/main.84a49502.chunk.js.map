{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","store/todo-lists-reducer.ts","EditableSpan.tsx","store/tasks-reducer.ts","TaskWithSelectors.tsx","todoList1.tsx","AppWithRedux.tsx","store/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","props","useState","newTaskTitle","setNewTaskTitle","error","setError","addItem","trimmedTitle","trim","TextField","size","variant","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","IconButton","onClick","color","AddBox","fontSize","initialState","v1","id","title","filter","ChangeTodoListFilterAC","type","EditableSpan","editMode","setEditMode","style","width","autoFocus","onBlur","setNewTitle","Edit","isDone","TaskWithSelectors","todoListId","taskId","console","log","task","useSelector","state","tasks","dispatch","useDispatch","onRemoveHandler","useCallback","removeTaskAC","changeStatus","changeTaskStatusAC","checked","changTitle","changeTaskTitleAC","ListItem","disableGutters","className","divider","padding","display","justifyContent","Checkbox","Delete","TodoList1","todoLists","todoList","taskForRender","t","TaskElement","map","onChangeTodoListTitle","ChangeTodoListTitleAC","Typography","fontWeight","addTaskAC","List","ButtonGroup","disableElevation","Button","AppWithRedux","addTodoList","AddTodoListAC","todoListsComponents","tl","Grid","item","Paper","elevation","AppBar","position","Toolbar","edge","aria-label","Menu","Container","fixed","container","spacing","rootReducer","combineReducers","action","newState","todoListID","newTodoList","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.84a49502.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {AddBox} from \"@material-ui/icons\";\n\ntype AddItemFormPropsType = {\n    addItem: (title: string) => void\n}\n\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\n    //console.log('AddItemForm was rendered')\n    const [newTaskTitle, setNewTaskTitle] = useState(\"\")\n    const [error, setError] = useState<boolean>(false)\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setError(false)\n        setNewTaskTitle(e.currentTarget.value)\n    }\n    const addItem = () => {\n        const trimmedTitle = newTaskTitle.trim()\n        if (trimmedTitle) {\n            props.addItem(trimmedTitle)\n            setNewTaskTitle(\"\")\n        } else {\n            setError(true)\n        }\n        setNewTaskTitle(\"\")\n    }\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === \"Enter\") {\n            addItem()\n        }\n    }\n\n\n    return (\n        <div>\n            <TextField\n                size={\"small\"}\n                variant={\"outlined\"}\n                value={newTaskTitle}\n                onChange={onChangeTitleHandler}\n                onKeyPress={onKeyPressHandler}\n                label={\"Title\"}\n                error={error}\n                helperText={error && \"Title is required!!!\"}\n            />\n            <IconButton onClick={addItem} color={\"primary\"} size={\"small\"}>\n                <AddBox fontSize={\"large\"}/>\n            </IconButton>\n        </div>\n    )\n})","import { TodoListType} from \"../AppWithRedux\";\nimport {v1} from \"uuid\";\nimport {FilterValuesType} from \"../todoList1\";\n\ntype RemoveTodoListAT = {\n    type: 'REMOVE-TODOLIST'\n    id: string\n}\ntype AddTodoListAT = {\n    type: 'ADD-TODOLIST',\n    title: string,\n    todoListId: string\n}\ntype ChangeTodoListTitleAT = {\n    type: 'CHANGE-TODOLIST-TITLE',\n    id: string\n    title: string\n}\ntype ChangeTodoListFilterAT = {\n    type: 'CHANGE-TODOLIST-FILTER',\n    id: string,\n    filter: FilterValuesType\n}\n\nexport const todoListId_1 = v1()\nexport const todoListId_2 = v1()\n\nconst initialState: Array<TodoListType> = [\n    {id: 'todoListId_1', title: \"What to learn?\", filter: \"all\"},\n    {id: 'todoListId_2', title: \"What to buy?\", filter: \"all\"},\n]\n\nexport type ActionType = RemoveTodoListAT | AddTodoListAT | ChangeTodoListTitleAT | ChangeTodoListFilterAT\n\nexport const todoListsReducer = (todoLists = initialState, action: ActionType): Array<TodoListType> => {\n    switch (action.type) {\n        case \"REMOVE-TODOLIST\":\n            return todoLists.filter(tl => tl.id !== action.id)\n        case 'ADD-TODOLIST':\n            const todoListID = action.todoListId\n            const newTodoList: TodoListType = {\n                id: todoListID,\n                title: action.title,\n                filter: \"all\"\n            }\n            return [newTodoList, ...todoLists]\n        case 'CHANGE-TODOLIST-TITLE':\n            return todoLists.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\n        case 'CHANGE-TODOLIST-FILTER':\n            return todoLists.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\n        default:\n            return todoLists\n    }\n}\n\nexport const RemoveTodoListAC = (id: string): RemoveTodoListAT => {\n    return {\n        type: 'REMOVE-TODOLIST',\n        id: id\n    }\n}\nexport const AddTodoListAC = (title: string): AddTodoListAT => {\n    return {\n        type: 'ADD-TODOLIST',\n        title: title,\n        todoListId: v1()\n    } as const\n}\nexport const ChangeTodoListTitleAC = (id: string, title: string): ChangeTodoListTitleAT => {\n    return {\n        type: 'CHANGE-TODOLIST-TITLE',\n        id: id,\n        title: title\n    }\n}\nexport const ChangeTodoListFilterAC = (id: string, filter: FilterValuesType): ChangeTodoListFilterAT => {\n    return {\n        type: 'CHANGE-TODOLIST-FILTER',\n        id: id,\n        filter: filter\n    }\n}","import React, {ChangeEvent, useCallback, useState} from \"react\";\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {Edit} from \"@material-ui/icons\";\n\ntype EditableSpanPropsType = {\n    title: string\n    setNewTitle: (title: string) => void\n}\n\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [newTaskTitle, setNewTaskTitle] = useState<string>(props.title)\n    const onEditMode = () => setEditMode(true)\n    const offEditMode = () => {\n        setEditMode(false)\n        props.setNewTitle(newTaskTitle)\n    }\n    const onChangeTitleHandler = ((e: ChangeEvent<HTMLInputElement>) => {\n        setNewTaskTitle(e.currentTarget.value)\n    })\n    return (\n        editMode\n            ? <TextField\n                style={{width: \"150px\"}}\n                value={newTaskTitle}\n                autoFocus={true}\n                onBlur={offEditMode}\n                onChange={onChangeTitleHandler}\n            />\n            : <span>{props.title}\n                <IconButton onClick={onEditMode} size={\"small\"}>\n                    <Edit fontSize={\"small\"}/>\n                </IconButton>\n            </span>\n    )\n})","import {TasksStateType} from \"../AppWithRedux\";\nimport {v1} from \"uuid\";\nimport {AddTodoListAC, RemoveTodoListAC, todoListId_1, todoListId_2} from \"./todo-lists-reducer\";\n\n\n\nexport type ActionType =\n    ReturnType<typeof removeTaskAC>\n    | ReturnType<typeof addTaskAC>\n    | ReturnType<typeof changeTaskStatusAC>\n    | ReturnType<typeof changeTaskTitleAC>\n    | ReturnType<typeof AddTodoListAC>\n    | ReturnType<typeof RemoveTodoListAC>\n\nconst initialState: TasksStateType = {['todoListId_1']: [\n        {id:'1', title: \"HTML\", isDone: false},\n        {id: '2', title: \"Css\", isDone: true},\n        {id:  '3', title: \"React\", isDone: false},\n        {id: '4', title: \"Graph QL\", isDone: true}\n    ],\n    ['todoListId_2']: [\n        {id:  '5', title: \"Meat\", isDone: false},\n        {id:  '6', title: \"Beer\", isDone: true},\n        {id: '7', title: \"Milk\", isDone: false},\n        {id:  '8', title: \"Bread\", isDone: true}\n    ]}\n\nexport const tasksReducer = (state = initialState, action: ActionType): TasksStateType => {\n    switch (action.type) {\n        case 'REMOVE-TASK':\n            return {\n                ...state,\n                [action.todoListId]: state[action.todoListId].filter(t => t.id !== action.taskId)\n            }\n        case 'ADD-TASK':\n            return {\n                ...state,\n                [action.todoListId]: [{id: v1(), title: action.title, isDone: false}, ...state[action.todoListId]]\n            }\n        case 'CHANGE-TASK-STATUS':\n            return {\n                ...state,\n                [action.todoListId]: state[action.todoListId].map(t => t.id === action.taskId ? {\n                    ...t,\n                    isDone: action.isDone\n                } : t)\n            }\n        case 'CHANGE-TASK-TITLE':\n            return {\n                ...state,\n                [action.todoListId]: state[action.todoListId].map(t => t.id === action.taskId ? {\n                    ...t,\n                    title: action.title\n                } : t)\n            }\n        case  'ADD-TODOLIST':\n            return {\n                ...state, [action.todoListId]: []\n            }\n        case 'REMOVE-TODOLIST':\n            let newState = {...state}\n            delete newState[action.id]\n            return newState\n        default:\n            return state\n    }\n}\n\nexport const removeTaskAC = (taskId: string, todoListId: string) => {\n    return {\n        type: 'REMOVE-TASK',\n        taskId,\n        todoListId\n    } as const\n}\nexport const addTaskAC = (title: string, todoListId: string) => {\n    return {\n        type: 'ADD-TASK',\n        title,\n        todoListId\n    } as const\n}\nexport const changeTaskStatusAC = (taskId: string, todoListId: string, isDone: boolean) => {\n    return {\n        type: 'CHANGE-TASK-STATUS',\n        taskId,\n        todoListId,\n        isDone\n    } as const\n}\nexport const changeTaskTitleAC = (taskId: string, todoListId: string, title: string) => {\n    return {\n        type: 'CHANGE-TASK-TITLE',\n        taskId,\n        todoListId,\n        title\n    } as const\n}\n/*\nexport const ChangeTodoListTitleAC = (id: string, title: string) => {\n    return {\n        type: 'CHANGE-TODOLIST-TITLE',\n        id: id,\n        title: title\n    }\n}\nexport const ChangeTodoListFilterAC = (id: string, filter: FilterValuesType) => {\n    return {\n        type: 'CHANGE-TODOLIST-FILTER',\n        id: id,\n        filter: filter\n    }\n}*/\n","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store/store\";\r\nimport {TaskType} from \"./AppWithRedux\";\r\nimport {Checkbox, IconButton, ListItem} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./store/tasks-reducer\";\r\n\r\ntype TaskWithSelectorsPropsType = {\r\n    todoListId: string\r\n    taskId: string\r\n}\r\n\r\nconst TaskWithSelectors = React.memo(({todoListId, taskId}: TaskWithSelectorsPropsType) => {\r\n    console.log('task rendered')\r\n    const task = useSelector<AppRootStateType, TaskType>(state => state.tasks[todoListId]\r\n        .filter(task => task.id === taskId)[0])\r\n    const dispatch = useDispatch()\r\n\r\n    const onRemoveHandler = useCallback(() => dispatch(removeTaskAC(taskId, todoListId)), [dispatch, taskId, todoListId])\r\n    const changeStatus = useCallback(\r\n        (e: ChangeEvent<HTMLInputElement>) => dispatch(changeTaskStatusAC(taskId, todoListId, e.currentTarget.checked)),\r\n        [dispatch, taskId, todoListId])\r\n    const changTitle = useCallback(\r\n        (title: string) => dispatch(changeTaskTitleAC(taskId, todoListId, title)),\r\n        [dispatch, taskId, todoListId])\r\n\r\n    return (\r\n        <ListItem\r\n            disableGutters\r\n            className={task.isDone ? \"is-done\" : \"\"}\r\n            key={task.id}\r\n            divider\r\n            style={{padding: \"0px\", display: \"flex\", justifyContent: \"space-between\"}}\r\n        >\r\n            <Checkbox\r\n                onChange={changeStatus}\r\n                color={\"primary\"}\r\n                checked={task.isDone}\r\n            />\r\n            <EditableSpan title={task.title} setNewTitle={changTitle}/>\r\n            <IconButton onClick={onRemoveHandler} size={\"small\"}>\r\n                <Delete fontSize={\"small\"}/>\r\n            </IconButton>\r\n        </ListItem>\r\n    );\r\n});\r\n\r\nexport default TaskWithSelectors;","import React, {ChangeEvent, useCallback} from \"react\";\nimport {TodoListType} from \"./App\";\nimport {AddItemForm} from \"./AddItemForm\";\nimport {EditableSpan} from \"./EditableSpan\";\nimport {Button, ButtonGroup, Checkbox, IconButton, List, ListItem, Typography} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./store/store\";\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./store/tasks-reducer\";\nimport {ChangeTodoListFilterAC, ChangeTodoListTitleAC, RemoveTodoListAC} from \"./store/todo-lists-reducer\";\nimport TaskWithSelectors from \"./TaskWithSelectors\";\n\n\nexport type taskType = {\n    id: string\n    title: string\n    isDone: boolean\n}\n\ntype PropsType = {\n    todoListId: string\n}\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\n\nexport const TodoList1 = React.memo((props: PropsType) => {\n    console.log('TodoList')\n\n    const todoLists = useSelector<AppRootStateType, TodoListType>(state => state.todoLists\n        .filter(todoList => todoList.id === props.todoListId)[0])\n\n    const tasks = useSelector<AppRootStateType, taskType[]>(state => state.tasks[props.todoListId])\n\n    const dispatch = useDispatch()\n\n    let taskForRender: Array<taskType> = tasks;\n    if (todoLists.filter === \"active\") {\n        taskForRender = tasks.filter(t => !t.isDone);\n    }\n\n    if (todoLists.filter === \"completed\") {\n        taskForRender = tasks.filter(t => t.isDone);\n    }\n\n    let TaskElement = taskForRender.map(t => {\n        return (\n           <TaskWithSelectors key={t.id} todoListId={props.todoListId} taskId={t.id}/>\n        )\n    })\n\n    const addTask = (title: string) => {\n        dispatch(addTaskAC(title, props.todoListId))\n    }\n    const onAllClickHandler = () => dispatch(ChangeTodoListFilterAC(props.todoListId, 'all'))\n    const onActiveClickHandler = () => dispatch(ChangeTodoListFilterAC(props.todoListId, 'active'))\n    const onCompletedClickHandler = () => dispatch(ChangeTodoListFilterAC(props.todoListId, 'completed'))\n    const onChangeTodoListTitle = useCallback((title: string) => {\n        console.log('Title was changed')\n        dispatch(ChangeTodoListTitleAC(props.todoListId, title))\n    },[dispatch])\n\n\n\n\n    /*const allBtnClass = filter === \"all\" ? \"active-filter\" : \"\"\n    const activeBtnClass = filter === \"active\" ? \"active-filter\" : \"\"\n    const completedBtnClass = filter === \"completed\" ? \"active-filter\" : \"\"*/\n\n    return (\n        <div className=\"todolist\">\n            <Typography variant={\"h6\"} style={{fontWeight: \"bold\"}}>\n                <EditableSpan title={todoLists.title} setNewTitle={onChangeTodoListTitle}/>\n                <IconButton onClick={useCallback(() => dispatch(RemoveTodoListAC(props.todoListId)), [dispatch, props.todoListId])}>\n                    <Delete/>\n                </IconButton>\n            </Typography>\n\n            <AddItemForm addItem={addTask}/>\n\n            <List>\n                {TaskElement}\n            </List>\n            <div className=\"btn\">\n                <ButtonGroup\n                    variant={\"contained\"}\n                    size={\"small\"}\n                    disableElevation\n                    style={{display: \"flex\", justifyContent: \"space-between\"}}\n                >\n                    <Button color={todoLists.filter === \"all\" ? \"secondary\" : \"primary\"}\n                            onClick={onAllClickHandler}>All</Button>\n                    <Button color={todoLists.filter === \"active\" ? \"secondary\" : \"primary\"}\n                            onClick={onActiveClickHandler}>Active</Button>\n                    <Button color={todoLists.filter === \"completed\" ? \"secondary\" : \"primary\"}\n                            onClick={onCompletedClickHandler}>Completed</Button>\n                </ButtonGroup>\n            </div>\n        </div>\n    )\n})\n","import React, {useCallback} from 'react';\nimport './App.css';\nimport {AddItemForm} from \"./AddItemForm\";\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\nimport {Menu} from \"@material-ui/icons\";\nimport {AddTodoListAC} from \"./store/todo-lists-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./store/store\";\nimport {FilterValuesType, TodoList1} from \"./todoList1\";\n\nexport type TaskType = {\n    id: string\n    title: string\n    isDone: boolean\n}\nexport type TodoListType = {\n    id: string\n    title: string\n    filter: FilterValuesType\n}\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}\n\n\n\nfunction AppWithRedux() {\n\n    const todoLists = useSelector<AppRootStateType, Array<TodoListType>>(state => state.todoLists)\n    const dispatch = useDispatch()\n\n    const addTodoList = useCallback((title: string) => {\n        dispatch(AddTodoListAC(title))\n    }, [dispatch])\n\n    const todoListsComponents = todoLists.map(tl => {\n        return (\n            <Grid item key={tl.id}>\n                <Paper elevation={8} style={{padding: \"10px\"}}>\n                    <TodoList1\n                        todoListId={tl.id}\n                    />\n                </Paper>\n            </Grid>\n        )\n    })\n\n\n    return (\n        <div className=\"App\">\n            <AppBar position={\"sticky\"}>\n                <Toolbar style={{justifyContent: \"space-between\"}}>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                        TodoLists\n                    </Typography>\n                    <Button color=\"inherit\" variant={\"outlined\"}>Login</Button>\n                </Toolbar>\n            </AppBar>\n            <Container fixed>\n                <Grid container style={{padding: \"29px 0\"}}>\n                    <AddItemForm addItem={addTodoList}/>\n                </Grid>\n                <Grid container spacing={4}>\n                    {todoListsComponents}\n                </Grid>\n            </Container>\n        </div>\n    );\n}\n\n\nexport default AppWithRedux;\n\n\n","import {tasksReducer} from './tasks-reducer';\nimport {combineReducers, createStore} from 'redux';\nimport {todoListsReducer} from \"./todo-lists-reducer\";\n\n// объединяя reducer-ы с помощью combineReducers,\n// мы задаём структуру нашего единственного объекта-состояния\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todoLists: todoListsReducer\n})\n// непосредственно создаём store\nexport const store = createStore(rootReducer);\n// определить автоматически тип всего объекта состояния\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\nimport AppWithRedux from \"./AppWithRedux\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store/store\";\n\nReactDOM.render(<Provider store={store}><AppWithRedux /></Provider>,  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}