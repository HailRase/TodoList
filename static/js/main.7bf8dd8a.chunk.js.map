{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","store/todo-lists-reducer.ts","EditableSpan.tsx","store/tasks-reducer.ts","todoList1.tsx","AppWithRedux.tsx","store/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","props","useState","newTaskTitle","setNewTaskTitle","error","setError","addItem","trimmedTitle","trim","TextField","size","variant","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","IconButton","onClick","color","AddBox","fontSize","initialState","ChangeTodoListFilterAC","id","filter","type","EditableSpan","editMode","setEditMode","title","style","width","autoFocus","onBlur","setNewTitle","Edit","TodoList1","todoLists","useSelector","state","todoList","todoListId","tasks","dispatch","useDispatch","taskForRender","t","isDone","TaskElement","map","ListItem","disableGutters","className","divider","padding","display","justifyContent","Checkbox","taskId","checked","changeTaskTitleAC","Delete","Typography","fontWeight","ChangeTodoListTitleAC","addTaskAC","List","ButtonGroup","disableElevation","Button","AppWithRedux","todoListsComponents","tl","Grid","item","Paper","elevation","AppBar","position","Toolbar","edge","aria-label","Menu","Container","fixed","container","v1","AddTodoListAC","spacing","rootReducer","combineReducers","action","newState","todoListID","newTodoList","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"0QAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6CCVOC,EAAc,SAACC,GACxB,IACA,EAAwCC,mBAAS,IAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAA0BF,oBAAkB,GAA5C,mBAAOG,EAAP,KAAcC,EAAd,KAKMC,EAAU,WACZ,IAAMC,EAAeL,EAAaM,OAC9BD,GACAP,EAAMM,QAAQC,GACdJ,EAAgB,KAEhBE,GAAS,GAEbF,EAAgB,KAUpB,OACI,6BACI,kBAACM,EAAA,EAAD,CACIC,KAAM,QACNC,QAAS,WACTC,MAAOV,EACPW,SA5BiB,SAACC,GAC1BT,GAAS,GACTF,EAAgBW,EAAEC,cAAcH,QA2BxBI,WAfc,SAACF,GACT,UAAVA,EAAEG,KACFX,KAcIY,MAAO,QACPd,MAAOA,EACPe,WAAYf,GAAS,yBAEzB,kBAACgB,EAAA,EAAD,CAAYC,QAASf,EAASgB,MAAO,UAAWZ,KAAM,SAClD,kBAACa,EAAA,EAAD,CAAQC,SAAU,a,+FCvB5BC,EAAoC,GA6C7BC,EAAyB,SAACC,EAAYC,GAC/C,MAAO,CACHC,KAAM,yBACNF,GAAIA,EACJC,OAAQA,I,iBChEHE,EAAe,SAAC9B,GACzB,MAAgCC,oBAAkB,GAAlD,mBAAO8B,EAAP,KAAiBC,EAAjB,KACA,EAAwC/B,mBAAiBD,EAAMiC,OAA/D,mBAAO/B,EAAP,KAAqBC,EAArB,KASA,OACI4B,EACM,kBAACtB,EAAA,EAAD,CACEyB,MAAO,CAACC,MAAO,SACfvB,MAAOV,EACPkC,WAAW,EACXC,OAbQ,WAChBL,GAAY,GACZhC,EAAMsC,YAAYpC,IAYVW,SAViB,SAACC,GAC1BX,EAAgBW,EAAEC,cAAcH,UAW1B,8BAAOZ,EAAMiC,MACX,kBAACb,EAAA,EAAD,CAAYC,QAlBL,kBAAMW,GAAY,IAkBQtB,KAAM,SACnC,kBAAC6B,EAAA,EAAD,CAAMf,SAAU,a,qDClB9BC,EAA+B,GCU9B,SAASe,EAAUxC,GAEtB,IAAMyC,EAAYC,aAA4C,SAAAC,GAAK,OAAIA,EAAMF,UACxEb,QAAO,SAAAgB,GAAQ,OAAIA,EAASjB,KAAO3B,EAAM6C,cAAY,MAEpDC,EAAQJ,aAA0C,SAAAC,GAAK,OAAIA,EAAMG,MAAM9C,EAAM6C,eAE7EE,EAAWC,cAEbC,EAAiCH,EACZ,WAArBL,EAAUb,SACVqB,EAAgBH,EAAMlB,QAAO,SAAAsB,GAAC,OAAKA,EAAEC,WAGhB,cAArBV,EAAUb,SACVqB,EAAgBH,EAAMlB,QAAO,SAAAsB,GAAC,OAAIA,EAAEC,WAGxC,IAAIC,EAAcH,EAAcI,KAAI,SAAAH,GAMhC,OACI,kBAACI,EAAA,EAAD,CACIC,gBAAc,EACdC,UAAWN,EAAEC,OAAS,UAAY,GAClClC,IAAKiC,EAAEvB,GACP8B,SAAO,EACPvB,MAAO,CAACwB,QAAS,MAAOC,QAAS,OAAQC,eAAgB,kBAEzD,kBAACC,EAAA,EAAD,CACIhD,SAXS,SAACC,GAAD,OAAsCiC,GDyBhCe,ECzB4DZ,EAAEvB,GDyB9CkB,ECzBkD7C,EAAM6C,WDyBpCM,ECzBgDrC,EAAEC,cAAcgD,QD0B5H,CACHlC,KAAM,qBACNiC,SACAjB,aACAM,YAL0B,IAACW,EAAgBjB,EAAoBM,GCbnD7B,MAAO,UACPyC,QAASb,EAAEC,SAEf,kBAAC,EAAD,CAAclB,MAAOiB,EAAEjB,MAAOK,YAdnB,SAACL,GAAD,OAAmBc,EDgCb,SAACe,EAAgBjB,EAAoBZ,GAClE,MAAO,CACHJ,KAAM,oBACNiC,SACAjB,aACAZ,SCrC+C+B,CAAkBd,EAAEvB,GAAG3B,EAAM6C,WAAYZ,OAehF,kBAACb,EAAA,EAAD,CAAYC,QAnBI,WDcJ,IAACyC,EAAgBjB,ECbjCE,GDaiBe,ECbKZ,EAAEvB,GDaSkB,ECbL7C,EAAM6C,WDcnC,CACHhB,KAAM,cACNiC,SACAjB,iBCC8CnC,KAAM,SACxC,kBAACuD,EAAA,EAAD,CAAQzC,SAAU,eAuBlC,OACI,yBAAKgC,UAAU,YACX,kBAACU,EAAA,EAAD,CAAYvD,QAAS,KAAMuB,MAAO,CAACiC,WAAY,SAC3C,kBAAC,EAAD,CAAclC,MAAOQ,EAAUR,MAAOK,YAdpB,SAACL,GAC3Bc,EHb6B,SAACpB,EAAYM,GAC9C,MAAO,CACHJ,KAAM,wBACNF,GAAIA,EACJM,MAAOA,GGSEmC,CAAsBpE,EAAM6C,WAAYZ,OAczC,kBAACb,EAAA,EAAD,CAAYC,QAAS,kBAAM0B,EHvChC,CACHlB,KAAM,kBACNF,GGqC6D3B,EAAM6C,eACvD,kBAACoB,EAAA,EAAD,QAIR,kBAAC,EAAD,CAAa3D,QA1BL,SAAC2B,GACbc,EDNiB,SAACd,EAAeY,GACrC,MAAO,CACHhB,KAAM,WACNI,QACAY,cCESwB,CAAUpC,EAAOjC,EAAM6C,gBA2B5B,kBAACyB,EAAA,EAAD,KACKlB,GAEL,yBAAKI,UAAU,OACX,kBAACe,EAAA,EAAD,CACI5D,QAAS,YACTD,KAAM,QACN8D,kBAAgB,EAChBtC,MAAO,CAACyB,QAAS,OAAQC,eAAgB,kBAEzC,kBAACa,EAAA,EAAD,CAAQnD,MAA4B,QAArBmB,EAAUb,OAAmB,YAAc,UAClDP,QApCE,kBAAM0B,EAASrB,EAAuB1B,EAAM6C,WAAY,UAmClE,OAEA,kBAAC4B,EAAA,EAAD,CAAQnD,MAA4B,WAArBmB,EAAUb,OAAsB,YAAc,UACrDP,QArCK,kBAAM0B,EAASrB,EAAuB1B,EAAM6C,WAAY,aAoCrE,UAEA,kBAAC4B,EAAA,EAAD,CAAQnD,MAA4B,cAArBmB,EAAUb,OAAyB,YAAc,UACxDP,QAtCQ,kBAAM0B,EAASrB,EAAuB1B,EAAM6C,WAAY,gBAqCxE,gBC3BL6B,MAhDf,WAEI,IAAMjC,EAAYC,aAAmD,SAAAC,GAAK,OAAIA,EAAMF,aAC9EM,EAAWC,cAMX2B,EAAsBlC,EAAUY,KAAI,SAAAuB,GACtC,OACI,kBAACC,EAAA,EAAD,CAAMC,MAAI,EAAC7D,IAAK2D,EAAGjD,IACf,kBAACoD,EAAA,EAAD,CAAOC,UAAW,EAAG9C,MAAO,CAACwB,QAAS,SAClC,kBAAClB,EAAD,CACIK,WAAY+B,EAAGjD,UAQnC,OACI,yBAAK6B,UAAU,OACX,kBAACyB,EAAA,EAAD,CAAQC,SAAU,UACd,kBAACC,EAAA,EAAD,CAASjD,MAAO,CAAC0B,eAAgB,kBAC7B,kBAACxC,EAAA,EAAD,CAAYgE,KAAK,QAAQ9D,MAAM,UAAU+D,aAAW,QAChD,kBAACC,EAAA,EAAD,OAEJ,kBAACpB,EAAA,EAAD,CAAYvD,QAAQ,MAApB,aAGA,kBAAC8D,EAAA,EAAD,CAAQnD,MAAM,UAAUX,QAAS,YAAjC,WAGR,kBAAC4E,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAACX,EAAA,EAAD,CAAMY,WAAS,EAACvD,MAAO,CAACwB,QAAS,WAC7B,kBAAC,EAAD,CAAapD,QAhCT,SAAC2B,GACjBc,EJcqB,SAACd,GAC1B,MAAO,CACHJ,KAAM,eACNI,MAAOA,EACPY,WAAY6C,eIlBHC,CAAc1D,QAiCf,kBAAC4C,EAAA,EAAD,CAAMY,WAAS,EAACG,QAAS,GACpBjB,M,QCrEfkB,EAAcC,YAAgB,CAChChD,MHQwB,WAA+D,IAA9DH,EAA6D,uDAArDlB,EAAcsE,EAAuC,uCACtF,OAAQA,EAAOlE,MACX,IAAK,cACD,OAAO,2BACAc,GADP,kBAEKoD,EAAOlD,WAAaF,EAAMoD,EAAOlD,YAAYjB,QAAO,SAAAsB,GAAC,OAAIA,EAAEvB,KAAOoE,EAAOjC,YAElF,IAAK,WACD,OAAO,2BACAnB,GADP,kBAEKoD,EAAOlD,WAFZ,CAE0B,CAAClB,GAAI+D,cAAMzD,MAAO8D,EAAO9D,MAAOkB,QAAQ,IAFlE,mBAE6ER,EAAMoD,EAAOlD,gBAE9F,IAAK,qBACD,OAAO,2BACAF,GADP,kBAEKoD,EAAOlD,WAAaF,EAAMoD,EAAOlD,YAAYQ,KAAI,SAAAH,GAAC,OAAIA,EAAEvB,KAAOoE,EAAOjC,OAAhB,2BAChDZ,GADgD,IAEnDC,OAAQ4C,EAAO5C,SACfD,OAEZ,IAAK,oBACD,OAAO,2BACAP,GADP,kBAEKoD,EAAOlD,WAAaF,EAAMoD,EAAOlD,YAAYQ,KAAI,SAAAH,GAAC,OAAIA,EAAEvB,KAAOoE,EAAOjC,OAAhB,2BAChDZ,GADgD,IAEnDjB,MAAO8D,EAAO9D,QACdiB,OAEZ,IAAM,eACF,OAAO,2BACAP,GADP,kBACeoD,EAAOlD,WAAa,KAEvC,IAAK,kBACD,IAAImD,EAAQ,eAAOrD,GAEnB,cADOqD,EAASD,EAAOpE,IAChBqE,EACX,QACI,OAAOrD,IG5CfF,ULoB4B,WAAwE,IAAvEA,EAAsE,uDAA1DhB,EAAcsE,EAA4C,uCACnG,OAAQA,EAAOlE,MACX,IAAK,kBACD,OAAOY,EAAUb,QAAO,SAAAgD,GAAE,OAAIA,EAAGjD,KAAOoE,EAAOpE,MACnD,IAAK,eACD,IAAMsE,EAAaF,EAAOlD,WACpBqD,EAA4B,CAC9BvE,GAAIsE,EACJhE,MAAO8D,EAAO9D,MACdL,OAAQ,OAEZ,MAAM,CAAEsE,GAAR,mBAAwBzD,IAC5B,IAAK,wBACD,OAAOA,EAAUY,KAAI,SAAAuB,GAAE,OAAIA,EAAGjD,KAAOoE,EAAOpE,GAAjB,2BAA0BiD,GAA1B,IAA8B3C,MAAO8D,EAAO9D,QAAS2C,KACpF,IAAK,yBACD,OAAOnC,EAAUY,KAAI,SAAAuB,GAAE,OAAIA,EAAGjD,KAAOoE,EAAOpE,GAAjB,2BAA0BiD,GAA1B,IAA8BhD,OAAQmE,EAAOnE,SAAUgD,KACtF,QACI,OAAOnC,MKlCN0D,EAAQC,YAAYP,GCFjCQ,IAASC,OAAO,kBAAC,IAAD,CAAUH,MAAOA,GAAO,kBAAC,EAAD,OAA8BI,SAASC,eAAe,SRkIxF,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA3G,GACL4G,QAAQ5G,MAAMA,EAAM6G,c","file":"static/js/main.7bf8dd8a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = (props: AddItemFormPropsType) => {\r\n    const errorMsgStyles = {backgroundColor: \"red\", color: \"white\", fontWeight: 900}\r\n    const [newTaskTitle, setNewTaskTitle] = useState(\"\")\r\n    const [error, setError] = useState<boolean>(false)\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(false)\r\n        setNewTaskTitle(e.currentTarget.value)\r\n    }\r\n    const addItem = () => {\r\n        const trimmedTitle = newTaskTitle.trim()\r\n        if (trimmedTitle) {\r\n            props.addItem(trimmedTitle)\r\n            setNewTaskTitle(\"\")\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setNewTaskTitle(\"\")\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            addItem()\r\n        }\r\n    }\r\n    const errorMessage = error && <div style={errorMsgStyles}>Title is required!</div>\r\n\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                size={\"small\"}\r\n                variant={\"outlined\"}\r\n                value={newTaskTitle}\r\n                onChange={onChangeTitleHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                label={\"Title\"}\r\n                error={error}\r\n                helperText={error && \"Title is required!!!\"}\r\n            />\r\n            <IconButton onClick={addItem} color={\"primary\"} size={\"small\"}>\r\n                <AddBox fontSize={\"large\"}/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}","import { TodoListType} from \"../AppWithRedux\";\r\nimport {v1} from \"uuid\";\r\nimport {FilterValuesType} from \"../todoList1\";\r\n\r\ntype RemoveTodoListAT = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\ntype AddTodoListAT = {\r\n    type: 'ADD-TODOLIST',\r\n    title: string,\r\n    todoListId: string\r\n}\r\ntype ChangeTodoListTitleAT = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: string\r\n    title: string\r\n}\r\ntype ChangeTodoListFilterAT = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: string,\r\n    filter: FilterValuesType\r\n}\r\n\r\nconst initialState: Array<TodoListType> = []\r\n\r\nexport type ActionType = RemoveTodoListAT | AddTodoListAT | ChangeTodoListTitleAT | ChangeTodoListFilterAT\r\n\r\nexport const todoListsReducer = (todoLists = initialState, action: ActionType): Array<TodoListType> => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TODOLIST\":\r\n            return todoLists.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            const todoListID = action.todoListId\r\n            const newTodoList: TodoListType = {\r\n                id: todoListID,\r\n                title: action.title,\r\n                filter: \"all\"\r\n            }\r\n            return [newTodoList, ...todoLists]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return todoLists.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return todoLists.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        default:\r\n            return todoLists\r\n    }\r\n}\r\n\r\nexport const RemoveTodoListAC = (id: string): RemoveTodoListAT => {\r\n    return {\r\n        type: 'REMOVE-TODOLIST',\r\n        id: id\r\n    }\r\n}\r\nexport const AddTodoListAC = (title: string): AddTodoListAT => {\r\n    return {\r\n        type: 'ADD-TODOLIST',\r\n        title: title,\r\n        todoListId: v1()\r\n    } as const\r\n}\r\nexport const ChangeTodoListTitleAC = (id: string, title: string): ChangeTodoListTitleAT => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-TITLE',\r\n        id: id,\r\n        title: title\r\n    }\r\n}\r\nexport const ChangeTodoListFilterAC = (id: string, filter: FilterValuesType): ChangeTodoListFilterAT => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-FILTER',\r\n        id: id,\r\n        filter: filter\r\n    }\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {Edit} from \"@material-ui/icons\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    setNewTitle: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = (props: EditableSpanPropsType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [newTaskTitle, setNewTaskTitle] = useState<string>(props.title)\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.setNewTitle(newTaskTitle)\r\n    }\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTaskTitle(e.currentTarget.value)\r\n    }\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                style={{width: \"150px\"}}\r\n                value={newTaskTitle}\r\n                autoFocus={true}\r\n                onBlur={offEditMode}\r\n                onChange={onChangeTitleHandler}\r\n            />\r\n            : <span>{props.title}\r\n                <IconButton onClick={onEditMode} size={\"small\"}>\r\n                    <Edit fontSize={\"small\"}/>\r\n                </IconButton>\r\n            </span>\r\n    )\r\n}","import {TasksStateType} from \"../AppWithRedux\";\r\nimport {v1} from \"uuid\";\r\nimport {AddTodoListAC, RemoveTodoListAC} from \"./todo-lists-reducer\";\r\n\r\n\r\nexport type ActionType =\r\n    ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof changeTaskStatusAC>\r\n    | ReturnType<typeof changeTaskTitleAC>\r\n    | ReturnType<typeof AddTodoListAC>\r\n    | ReturnType<typeof RemoveTodoListAC>\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state = initialState, action: ActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].filter(t => t.id !== action.taskId)\r\n            }\r\n        case 'ADD-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: [{id: v1(), title: action.title, isDone: false}, ...state[action.todoListId]]\r\n            }\r\n        case 'CHANGE-TASK-STATUS':\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].map(t => t.id === action.taskId ? {\r\n                    ...t,\r\n                    isDone: action.isDone\r\n                } : t)\r\n            }\r\n        case 'CHANGE-TASK-TITLE':\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].map(t => t.id === action.taskId ? {\r\n                    ...t,\r\n                    title: action.title\r\n                } : t)\r\n            }\r\n        case  'ADD-TODOLIST':\r\n            return {\r\n                ...state, [action.todoListId]: []\r\n            }\r\n        case 'REMOVE-TODOLIST':\r\n            let newState = {...state}\r\n            delete newState[action.id]\r\n            return newState\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todoListId: string) => {\r\n    return {\r\n        type: 'REMOVE-TASK',\r\n        taskId,\r\n        todoListId\r\n    } as const\r\n}\r\nexport const addTaskAC = (title: string, todoListId: string) => {\r\n    return {\r\n        type: 'ADD-TASK',\r\n        title,\r\n        todoListId\r\n    } as const\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, todoListId: string, isDone: boolean) => {\r\n    return {\r\n        type: 'CHANGE-TASK-STATUS',\r\n        taskId,\r\n        todoListId,\r\n        isDone\r\n    } as const\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, todoListId: string, title: string) => {\r\n    return {\r\n        type: 'CHANGE-TASK-TITLE',\r\n        taskId,\r\n        todoListId,\r\n        title\r\n    } as const\r\n}\r\n/*\r\nexport const ChangeTodoListTitleAC = (id: string, title: string) => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-TITLE',\r\n        id: id,\r\n        title: title\r\n    }\r\n}\r\nexport const ChangeTodoListFilterAC = (id: string, filter: FilterValuesType) => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-FILTER',\r\n        id: id,\r\n        filter: filter\r\n    }\r\n}*/\r\n","import React, {ChangeEvent} from \"react\";\r\nimport {TodoListType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, ButtonGroup, Checkbox, IconButton, List, ListItem, Typography} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store/store\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./store/tasks-reducer\";\r\nimport {ChangeTodoListFilterAC, ChangeTodoListTitleAC, RemoveTodoListAC} from \"./store/todo-lists-reducer\";\r\n\r\n\r\nexport type taskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    todoListId: string\r\n}\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\nexport function TodoList1(props: PropsType) {\r\n\r\n    const todoLists = useSelector<AppRootStateType, TodoListType>(state => state.todoLists\r\n        .filter(todoList => todoList.id === props.todoListId)[0])\r\n\r\n    const tasks = useSelector<AppRootStateType, taskType[]>(state => state.tasks[props.todoListId])\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    let taskForRender: Array<taskType> = tasks;\r\n    if (todoLists.filter === \"active\") {\r\n        taskForRender = tasks.filter(t => !t.isDone);\r\n    }\r\n\r\n    if (todoLists.filter === \"completed\") {\r\n        taskForRender = tasks.filter(t => t.isDone);\r\n    }\r\n\r\n    let TaskElement = taskForRender.map(t => {\r\n        const onRemoveHandler = () => {\r\n            dispatch(removeTaskAC(t.id, props.todoListId))\r\n        }\r\n        const changeStatus = (e: ChangeEvent<HTMLInputElement>) => dispatch(changeTaskStatusAC(t.id, props.todoListId, e.currentTarget.checked))\r\n        const changTitle = (title: string) => dispatch(changeTaskTitleAC(t.id,props.todoListId, title ))\r\n        return (\r\n            <ListItem\r\n                disableGutters\r\n                className={t.isDone ? \"is-done\" : \"\"}\r\n                key={t.id}\r\n                divider\r\n                style={{padding: \"0px\", display: \"flex\", justifyContent: \"space-between\"}}\r\n            >\r\n                <Checkbox\r\n                    onChange={changeStatus}\r\n                    color={\"primary\"}\r\n                    checked={t.isDone}\r\n                />\r\n                <EditableSpan title={t.title} setNewTitle={changTitle}/>\r\n                <IconButton onClick={onRemoveHandler} size={\"small\"}>\r\n                    <Delete fontSize={\"small\"}/>\r\n                </IconButton>\r\n            </ListItem>\r\n        )\r\n    })\r\n\r\n    const addTask = (title: string) => {\r\n        dispatch(addTaskAC(title, props.todoListId))\r\n    }\r\n    const onAllClickHandler = () => dispatch(ChangeTodoListFilterAC(props.todoListId, 'all'))\r\n    const onActiveClickHandler = () => dispatch(ChangeTodoListFilterAC(props.todoListId, 'active'))\r\n    const onCompletedClickHandler = () => dispatch(ChangeTodoListFilterAC(props.todoListId, 'completed'))\r\n    const onChangeTodoListTitle = (title: string) => {\r\n        dispatch(ChangeTodoListTitleAC(props.todoListId, title))\r\n    }\r\n\r\n\r\n\r\n\r\n    /*const allBtnClass = filter === \"all\" ? \"active-filter\" : \"\"\r\n    const activeBtnClass = filter === \"active\" ? \"active-filter\" : \"\"\r\n    const completedBtnClass = filter === \"completed\" ? \"active-filter\" : \"\"*/\r\n\r\n    return (\r\n        <div className=\"todolist\">\r\n            <Typography variant={\"h6\"} style={{fontWeight: \"bold\"}}>\r\n                <EditableSpan title={todoLists.title} setNewTitle={onChangeTodoListTitle}/>\r\n                <IconButton onClick={() => dispatch(RemoveTodoListAC(props.todoListId))}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </Typography>\r\n\r\n            <AddItemForm addItem={addTask}/>\r\n\r\n            <List>\r\n                {TaskElement}\r\n            </List>\r\n            <div className=\"btn\">\r\n                <ButtonGroup\r\n                    variant={\"contained\"}\r\n                    size={\"small\"}\r\n                    disableElevation\r\n                    style={{display: \"flex\", justifyContent: \"space-between\"}}\r\n                >\r\n                    <Button color={todoLists.filter === \"all\" ? \"secondary\" : \"primary\"}\r\n                            onClick={onAllClickHandler}>All</Button>\r\n                    <Button color={todoLists.filter === \"active\" ? \"secondary\" : \"primary\"}\r\n                            onClick={onActiveClickHandler}>Active</Button>\r\n                    <Button color={todoLists.filter === \"completed\" ? \"secondary\" : \"primary\"}\r\n                            onClick={onCompletedClickHandler}>Completed</Button>\r\n                </ButtonGroup>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useReducer, useState} from 'react';\r\nimport './App.css';\r\nimport {taskType, TodoList} from \"./todoList\";\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {\r\n    AddTodoListAC,\r\n    ChangeTodoListFilterAC,\r\n    ChangeTodoListTitleAC,\r\n    RemoveTodoListAC,\r\n    todoListsReducer\r\n} from \"./store/todo-lists-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC, tasksReducer} from \"./store/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store/store\";\r\nimport {FilterValuesType, TodoList1} from \"./todoList1\";\r\n\r\ntype TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\n\r\nfunction AppWithRedux() {\r\n\r\n    const todoLists = useSelector<AppRootStateType, Array<TodoListType>>(state => state.todoLists)\r\n    const dispatch = useDispatch()\r\n\r\n    const addTodoList = (title: string) => {\r\n        dispatch(AddTodoListAC(title))\r\n    }\r\n\r\n    const todoListsComponents = todoLists.map(tl => {\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Paper elevation={8} style={{padding: \"10px\"}}>\r\n                    <TodoList1\r\n                        todoListId={tl.id}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position={\"sticky\"}>\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        TodoLists\r\n                    </Typography>\r\n                    <Button color=\"inherit\" variant={\"outlined\"}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"29px 0\"}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={4}>\r\n                    {todoListsComponents}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default AppWithRedux;\r\n\r\n\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\nimport {todoListsReducer} from \"./todo-lists-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoLists: todoListsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./store/store\";\r\n\r\nReactDOM.render(<Provider store={store}><AppWithRedux /></Provider>,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}